#!/bin/bash
# This script is executed as root by systemd on boot

set -ex

function get_cmdline_param() {
    cat /proc/cmdline | grep -oP "(?<=$1=)[^ ]*"
}

if [ "$(get_cmdline_param "tinfoil-debug")" != "on" ]; then
    echo "Disabling serial tty"
    systemctl stop serial-getty@ttyS0
else
    echo "WARNING: Debug mode is enabled"
fi

echo "Creating ramdisk..."
RAM_GB=$(($(free -g | awk '/^Mem:/{print $2}')))
SIZE=$((RAM_GB - 16))

# Fallback for dev machines
if [ $SIZE -lt 16 ]; then
    echo "WARNING: Not enough RAM ($SIZE GB) for ramdisk, falling back to 4G"
    SIZE=4
fi

mount -t tmpfs -o size=${SIZE}G tmpfs /mnt/ramdisk
chmod 777 /mnt/ramdisk
cd /mnt/ramdisk

# Mount tmp as ramdisk
mount -t tmpfs -o size=512M tmpfs /tmp

mkdir -p /mnt/ramdisk/vllm/run

if [ ! -e /dev/sdb ]; then
    echo "No config disk found"
    exit 1
fi

# Mounting the config file as a disk adds null bytes to the end, we need to strip them
dd if=/dev/sdb bs=1 status=none | tr -d '\0' > /mnt/ramdisk/config.yml
expected_config_hash=$(get_cmdline_param "tinfoil-config-hash")
config_hash=$(sha256sum /mnt/ramdisk/config.yml | cut -d ' ' -f 1)
if [ "$expected_config_hash" != "$config_hash" ]; then
    echo "ERROR: Config hash mismatch"
    echo "Expected: $expected_config_hash"
    echo "Actual: $config_hash"
    exit 1
else
    echo "Config hash matches"
fi

source /opt/venv/bin/activate

# Check for GPUs
if lspci | grep -i nvidia > /dev/null; then
    echo "Loading nvidia driver..."
    /sbin/modprobe ecdsa_generic ecdh
    /sbin/modprobe --ignore-install nvidia

    # Verify GPU attestation
    echo "Verifying GPU attestation..."
    python3 -m verifier.cc_admin

    # Manual override
    # nvidia-smi conf-compute -srs 1
else
    echo "No GPU(s) detected"
fi

# Restart the SEV shim with config
yq .shim config.yml -ry > shim.yml
systemctl restart tinfoil-sev-shim

# Mount MPK and set up containers
tinfoil-setup

touch /mnt/ramdisk/vllm-env
echo "VLLM_MODEL=/mnt/ramdisk/mpk/$(ls -AU /mnt/ramdisk/mpk | head -1)" > /mnt/ramdisk/vllm-env
echo "VLLM_MODE_NAME=$(yq -r '.models[0].name' /mnt/ramdisk/config.yml)" >> /mnt/ramdisk/vllm-env
echo "VLLM_ARGS=$(yq -r '."vllm-args"' /mnt/ramdisk/config.yml)" >> /mnt/ramdisk/vllm-env

# Wait for ready and restart vllm
sleep 2
systemctl restart vllm

# echo Waiting for vllm service to start...
# while ! $(curl -sL http://localhost:11434/api/version > /dev/null 2>&1); do
#     echo "Waiting"
#     sleep 1
# done

echo "Tinfoil boot process complete"
